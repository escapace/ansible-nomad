#!/usr/bin/env bash

set -e
set -u
set -o pipefail

umask 027

SCRIPT_NAME=
SCRIPT_NAME="$(basename "$0")"

readonly CNI_NOMAD_SUBNET="172.26.64.0/20"
readonly CNI_VPC_SUBNET="172.26.48.0/20"

function print_usage() {
  echo
  echo "Usage: run-nomad-network [OPTIONS]"
  echo
  echo "This script is used to configure nomad network(s) on an AWS server."
  echo
  echo "Options:"
  echo
  echo -e "  --interface\tPrimary interface."
  echo -e "  --prefix-interface\tSecondary interface."
  echo -e "  --enable-metadata\tWhether the metadata service is accessible."
}

function log() {
  local readonly level="$1"
  local readonly message="$2"
  local readonly timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  echo >&2 -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info() {
  local readonly message="$1"
  log "INFO" "$message"
}

function log_warn() {
  local readonly message="$1"
  log "WARN" "$message"
}

function log_error() {
  local readonly message="$1"
  log "ERROR" "$message"
}

function assert_not_empty() {
  local readonly arg_name="$1"
  local readonly arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log_error "The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}

function assert_is_installed() {
  local -r name="$1"

  if [[ ! $(command -v ${name}) ]]; then
    log_error "The binary '$name' is required by this script but is not installed or in the system's PATH."
    exit 1
  fi
}

function get_address() {
  local -r type="${1}"
  local -r interface="${2}"

  local variable_reference

  variable_reference="EC2_INSTANCE_${interface^^}_${type^^}_ADDRESS"

  echo "${!variable_reference}"
}

function get_vpc_cidr() {
  local -r type="${1}"
  local -r interface="${2}"

  local variable_reference

  variable_reference="EC2_INSTANCE_${interface^^}_${type^^}_VPC_CIDR"

  echo "${!variable_reference}"
}

function get_prefix_cidr() {
  local -r type="${1}"
  local -r interface="${2}"

  local variable_reference

  variable_reference="EC2_INSTANCE_${interface^^}_${type^^}_PREFIX_CIDR"

  echo "${!variable_reference}"
}

function configure_vpc() {
  local -r primary_interface="${1}"
  local -r interface="${2}"
  local -r kresd_directory_path="/etc/knot-resolver/kresd.conf.d"
  local -r ferm_directory_path="/etc/ferm/ferm.d"
  local -r template_path="/opt/cni/config/vpc.conflist"
  local -r resolv_conf_path="/opt/cni/run/vpc-resolv.conf"

  local vpc_ipv6_cidr
  vpc_ipv6_cidr="$(get_vpc_cidr "ipv6" "${interface}")"

  local ipv6_subnet
  ipv6_subnet="$(get_prefix_cidr "ipv6" "${interface}")"

  local ipv6_address
  ipv6_address="$(get_address "ipv6" "${interface}")"

  local dns_ipv4_address
  local dns_ipv6_address
  dns_ipv4_address="$(get_address "ipv4" "${primary_interface}")"
  dns_ipv6_address="$(get_address "ipv6" "${primary_interface}")"

  local -r resolv_conf=$(
    cat << EOF
nameserver ${dns_ipv4_address}
nameserver ${dns_ipv6_address}

EOF
  )

  local -r template=$(
    cat << EOF
{
  "cniVersion": "0.4.0",
  "name": "vpc",
  "plugins": [
    {
      "type": "ptp-eth1",
      "ipMasq": true,
      "ipam": {
        "type": "host-local",
        "subnet": "${CNI_VPC_SUBNET}",
        "dataDir": "/var/run/cni/vpc-ptp",
        "routes": [
          {
            "dst": "0.0.0.0/0"
          }
        ]
      },
      "dns": {
        "nameservers": ["${dns_ipv4_address}", "${dns_ipv6_address}"]
      }
    },
    {
      "type": "ipvlan",
      "master": "${interface}",
      "mode": "l3s",
      "ipam": {
        "type": "host-local",
        "resolvConf": "${resolv_conf_path}",
        "dataDir": "/var/run/cni/vpc-ipvlan",
        "ranges": [
          [
            {
              "subnet": "${ipv6_subnet}"
            }
          ]
        ],
        "routes": [
          {
            "dst": "::/0"
          }
        ]
      }
    }
  ]
}

EOF
  )

  log_info "${template_path}: cni/vpc configuration."

  echo "${template}" | jq -M '.' > "${template_path}"

  chown root:root "${template_path}"
  chmod 644 "${template_path}"

  log_info "${resolv_conf_path}: cni/vpc dns configuration."

  echo -e "$resolv_conf" > "$resolv_conf_path"
  chown root:root "${resolv_conf_path}"
  chmod 644 "${resolv_conf_path}"

  if [[ -d "${ferm_directory_path}" ]]; then
    local -r ferm_interface_dns_conf_path="${ferm_directory_path}/1030-interface-${interface}.conf"

    local -r ferm_interface_dns_conf=$(
      cat << EOF
domain ip6 {
  table filter {
    chain (INPUT FORWARD) {
      saddr ${ipv6_subnet} daddr ${dns_ipv6_address} proto (udp tcp) dport 53 ACCEPT;
    }

    chain (INPUT) {
      saddr ${vpc_ipv6_cidr} daddr ${ipv6_subnet} ACCEPT;
    }
  }
}

domain ip {
  table filter {
    chain (INPUT FORWARD) {
      saddr $CNI_VPC_SUBNET daddr ${dns_ipv4_address} proto (udp tcp) dport 53 ACCEPT;
    }

    chain FORWARD {
      saddr $CNI_VPC_SUBNET outerface ${primary_interface} ACCEPT;
      mod state state (ESTABLISHED RELATED) daddr $CNI_VPC_SUBNET ACCEPT;
    }
  }

  table nat {
    chain POSTROUTING {
      saddr ${CNI_VPC_SUBNET} outerface ${primary_interface} MASQUERADE;
    }
  }
}

EOF
    )

    log_info "${ferm_interface_dns_conf_path}: cni/vpc dns configuration."

    echo -e "$ferm_interface_dns_conf" > "$ferm_interface_dns_conf_path"

    chown root:root "$ferm_interface_dns_conf_path"
    chmod 600 "$ferm_interface_dns_conf_path"
  fi

  if [[ -d "${kresd_directory_path}" ]]; then
    local -r kresd_view_interface_conf_path="${kresd_directory_path}/920-view-${interface}.conf"

    local -r kresd_view_interface_conf=$(
      cat << EOF
view:addr('${ipv6_address}', policy.all(policy.PASS))
view:addr('${ipv6_subnet}', policy.all(policy.PASS))
view:addr('${CNI_VPC_SUBNET}', policy.all(policy.PASS))
EOF
    )

    log_info "${kresd_view_interface_conf_path}: knot-resolver configuration."

    echo -e "$kresd_view_interface_conf" > "$kresd_view_interface_conf_path"
    chown root:knot-resolver "$kresd_view_interface_conf_path"
    chmod 640 "$kresd_view_interface_conf_path"
  fi
}

function configure_nomad() {
  # TODO: https://github.com/hashicorp/nomad/issues/11102

  local -r interface="${1}"
  local -r docker_drop_in_directory_path="/etc/systemd/system/docker.service.d"
  local -r kresd_directory_path="/etc/knot-resolver/kresd.conf.d"
  local -r ferm_directory_path="/etc/ferm/ferm.d"

  local ipv4_address
  local ipv6_address

  ipv4_address="$(get_address "ipv4" "${interface}")"
  ipv6_address="$(get_address "ipv6" "${interface}")"

  if [[ -d "${docker_drop_in_directory_path}" ]]; then
    local -r docker_drop_in_path="${docker_drop_in_directory_path}/050-dns-override.conf"

    local -r docker_drop_in=$(
      cat << EOF
[Service]
Environment='DOCKER_DNS_OPTIONS=--dns ${ipv4_address} --dns ${ipv6_address}'

EOF
    )
    log_info "$docker_drop_in_path: docker dns configuration."

    echo -e "$docker_drop_in" > "$docker_drop_in_path"

    chown root:root "${docker_drop_in_path}"
    chmod 644 "${docker_drop_in_path}"
  fi

  if [[ -d "${kresd_directory_path}" ]]; then
    local -r kresd_network_interface_conf_path="${kresd_directory_path}/410-network-${interface}.conf"
    local -r kresd_view_nomad_conf_path="${kresd_directory_path}/920-view-${interface}.conf"

    local -r kresd_network_interface_conf=$(
      cat << EOF
net.listen('${ipv4_address}', 53, { kind = 'dns', freebind = true })
net.listen('${ipv6_address}', 53, { kind = 'dns', freebind = true })
EOF
    )

    log_info "${kresd_network_interface_conf_path}: knot-resolver configuration."

    echo -e "$kresd_network_interface_conf" > "$kresd_network_interface_conf_path"
    chown root:knot-resolver "$kresd_network_interface_conf_path"
    chmod 640 "$kresd_network_interface_conf_path"

    local -r kresd_view_nomad_conf=$(
      cat << EOF
view:addr('${ipv4_address}', policy.all(policy.PASS))
view:addr('${ipv6_address}', policy.all(policy.PASS))
view:addr('${CNI_NOMAD_SUBNET}', policy.all(policy.PASS))
EOF
    )

    log_info "${kresd_view_nomad_conf_path}: knot-resolver configuration."

    echo -e "$kresd_view_nomad_conf" > "$kresd_view_nomad_conf_path"
    chown root:knot-resolver "$kresd_view_nomad_conf_path"
    chmod 640 "$kresd_view_nomad_conf_path"
  fi

  if [[ -d "${ferm_directory_path}" ]]; then
    local -r ferm_nomad_dns_conf_path="${ferm_directory_path}/1030-interface-${interface}.conf"

    local -r ferm_nomad_dns_conf=$(
      cat << EOF
domain ip table filter {
  chain INPUT daddr ${ipv4_address} proto (udp tcp) dport 53 {
    interface nomad saddr ${CNI_NOMAD_SUBNET} ACCEPT;
  }
}
EOF
    )

    log_info "${ferm_nomad_dns_conf_path}: nomad dns configuration."

    echo -e "$ferm_nomad_dns_conf" > "$ferm_nomad_dns_conf_path"

    chown root:root "$ferm_nomad_dns_conf_path"
    chmod 600 "$ferm_nomad_dns_conf_path"
  fi
}

function configure_nomad_metadata() {
  local -r enable_metadata="${1}"
  local -r ferm_directory_path="/etc/ferm/ferm.d"
  local -r ferm_nomad_metadata_conf_path="${ferm_directory_path}/1020-interface-nomad-metadata.conf"

  local policy="DROP"

  if [[ "${enable_metadata}" == "true" ]]; then
    policy="ACCEPT"
  fi

  if [[ -d "${ferm_directory_path}" ]]; then
    local -r ferm_nomad_metadata_conf=$(
      cat << EOF
domain ip table filter {
  chain NOMAD-ADMIN daddr 169.254.169.254 proto tcp dport 80 {
    interface nomad saddr ${CNI_NOMAD_SUBNET} ${policy};
  }
}
EOF
    )

    log_info "${ferm_nomad_metadata_conf_path}: instance metadata configuration."

    echo -e "$ferm_nomad_metadata_conf" > "$ferm_nomad_metadata_conf_path"

    chown root:root "$ferm_nomad_metadata_conf_path"
    chmod 600 "$ferm_nomad_metadata_conf_path"
  fi
}

function configure_vpc_metadata() {
  local -r enable_metadata="${1}"
  local -r interface="${2}"
  local -r ferm_directory_path="/etc/ferm/ferm.d"
  local -r ferm_nomad_metadata_conf_path="${ferm_directory_path}/1020-interface-${interface}-metadata.conf"

  local prefix_ipv6_subnet
  prefix_ipv6_subnet="$(get_prefix_cidr "ipv6" "${interface}")"

  local policy="DROP"

  if [[ "${enable_metadata}" == "true" ]]; then
    policy="ACCEPT"
  fi

  if [[ -d "${ferm_directory_path}" ]]; then
    local -r ferm_nomad_metadata_conf=$(
      cat << EOF
domain (ip ip6) table filter {
  chain (INPUT FORWARD OUTPUT) daddr (169.254.169.254 fd00:ec2::254) proto tcp dport 80 {
    saddr ${CNI_VPC_SUBNET} ${policy};
    saddr ${prefix_ipv6_subnet} ${policy};
  }
}
EOF
    )

    log_info "${ferm_nomad_metadata_conf_path}: instance metadata configuration."

    echo -e "$ferm_nomad_metadata_conf" > "$ferm_nomad_metadata_conf_path"

    chown root:root "$ferm_nomad_metadata_conf_path"
    chmod 600 "$ferm_nomad_metadata_conf_path"
  fi
}

function setup_environment() {
  local -r interface="${1}"
  local -r has_prefix="${2:-false}"
  local -r environment_drop_in_path="/etc/systemd/system/ec2-environment.service.d/cni-${interface}.conf"

  log_info "$environment_drop_in_path: ec2-environment systemd drop-in."

  local -r template=$(
    cat << EOF
[Service]
Environment=EXPECT_IPV4_${interface^^}=true
Environment=EXPECT_IPV6_${interface^^}=true

{{ if conv.ToBool ((ds "data").has_prefix) }}
Environment=EXPECT_IPV6_PREFIX_${interface^^}=true
{{ end }}

EOF
  )

  echo "{ \"interface\": \"${interface}\", \"has_prefix\": ${has_prefix} }" | jq -M '.' | gomplate \
    -i "${template}" -d data=stdin:///data.json > "$environment_drop_in_path"

  chown root:root "${environment_drop_in_path}"
  chmod 644 "${environment_drop_in_path}"
}

function restart_services() {
  systemctl daemon-reload

  local services=()

  if systemctl is-active 'kresd@*' &> /dev/null; then
    services+=("kresd@*")
  fi

  if systemctl is-active ferm.service &> /dev/null; then
    services+=("ferm.service")
  fi

  if systemctl is-active docker.service &> /dev/null; then
    services+=("docker.service")
  fi

  if systemctl is-active nomad.service &> /dev/null; then
    services+=("nomad.service")
  fi

  systemctl --no-block restart "${services[@]}"
}

function run() {
  local interface="eth0"
  local prefix_interface="eth1"
  local enable_metadata="false"

  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
      --enable-metadata)
        enable_metadata="true"
        ;;
      --interface)
        assert_not_empty "$key" "$2"
        interface="$2"
        shift
        ;;
      --prefix-interface)
        assert_not_empty "$key" "$2"
        prefix_interface="$2"
        shift
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  assert_is_installed "systemctl"
  assert_is_installed "jq"
  assert_is_installed "gomplate"
  assert_is_installed "awk"

  assert_not_empty "--interface" "$interface"
  assert_not_empty "--prefix-interface" "$prefix_interface"

  if [[ "${interface}" == "${prefix_interface}" ]]; then
    exit 1
  fi

  setup_environment "${interface}"
  setup_environment "${prefix_interface}" "true"

  systemctl daemon-reload
  systemctl restart ec2-environment

  set -o allexport
  source "/etc/sysconfig/ec2-environment"
  set +o allexport

  configure_nomad "${interface}"
  configure_nomad_metadata "${enable_metadata}"

  configure_vpc "${interface}" "${prefix_interface}"
  configure_vpc_metadata "${enable_metadata}" "${prefix_interface}"

  restart_services
}

run "$@"

# function write_nomad_udev_rule {
#   local -r nomad_udev_rule_path="/etc/udev/rules.d/80-nomad.rules"
#   local -r nomad_udev_rule=$(cat <<EOF
# SUBSYSTEM=="net", ACTION=="add", ENV{ID_NET_DRIVER}=="bridge", ENV{INTERFACE}=="nomad", RUN+="/sbin/ip link set nomad promisc on"
# EOF
# )
#
#   log_info "${nomad_udev_rule_path}: enable promiscuous mode on nomad bridge."
#
#   echo -e "$nomad_udev_rule" > "$nomad_udev_rule_path"
#   chown root:root "$nomad_udev_rule_path"
#   chmod 644 "$nomad_udev_rule_path"
#
#   if ip link show dev nomad &> /dev/null
#   then
#     ip link set nomad promisc on
#   fi
# }

# function get_prefix_address {
#   local -r type="${1}"
#   local -r interface="${2}"
#
#   local variable_reference
#
#   variable_reference="EC2_INSTANCE_${interface^^}_${type^^}_PREFIX_ADDRESS"
#
#   echo "${!variable_reference}"
# }

# function get_prefix_length {
#   local -r type="${1}"
#   local -r interface="${2}"
#
#   local variable_reference
#
#   variable_reference="EC2_INSTANCE_${interface^^}_${type^^}_PREFIX_LENGTH"
#
#   echo "${!variable_reference}"
# }

#     local -r kresd_network_interface_conf_path="${kresd_directory_path}/410-network-${interface}.conf"
#     local -r kresd_network_interface_conf=$(
#       cat << EOF
# net.listen('${ipv4_address}', 53, { kind = 'dns', freebind = true })
# net.listen('${ipv6_address}', 53, { kind = 'dns', freebind = true })
# EOF
#     )
#
#     log_info "${kresd_network_interface_conf_path}: knot-resolver configuration."
#
#     echo -e "$kresd_network_interface_conf" > "$kresd_network_interface_conf_path"
#     chown root:knot-resolver "$kresd_network_interface_conf_path"
#     chmod 640 "$kresd_network_interface_conf_path"

