#!/bin/bash
# This script is used to configure and run Nomad on an AWS server.

set -e
set -u
set -o pipefail

umask 027

readonly NOMAD_CONFIG_FILE="default.hcl"
readonly SYSTEMD_CONFIG_PATH="/etc/systemd/system/nomad.service"

readonly EC2_INSTANCE_METADATA_URL="http://169.254.169.254/latest/meta-data"
readonly EC2_INSTANCE_DYNAMIC_DATA_URL="http://169.254.169.254/latest/dynamic"

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SCRIPT_NAME="$(basename "$0")"

function print_usage {
  echo
  echo "Usage: run-nomad [OPTIONS]"
  echo
  echo "This script is used to configure and run Nomad on an AWS server."
  echo
  echo "Options:"
  echo
  echo -e "  --server\t\tIf set, run in server mode. Optional. At least one of --server or --client must be set."
  echo -e "  --client\t\tIf set, run in client mode. Optional. At least one of --server or --client must be set."
  echo -e "  --num-servers\t\tThe number of servers to expect in the Nomad cluster. Required if --server is true."
  echo -e "  --config-dir\t\tThe path to the Nomad config folder. Optional. Default is the absolute path of '../config', relative to this script."
  echo -e "  --data-dir\t\tThe path to the Nomad data folder. Optional. Default is the absolute path of '../data', relative to this script."
  echo -e "  --bin-dir\t\tThe path to the folder with Nomad binary. Optional. Default is the absolute path of the parent folder of this script."
  echo -e "  --systemd-stdout\t\tThe StandardOutput option of the systemd unit.  Optional.  If not configured, uses systemd's default (journal)."
  echo -e "  --systemd-stderr\t\tThe StandardError option of the systemd unit.  Optional.  If not configured, uses systemd's default (inherit)."
  echo -e "  --user\t\tThe user to run Nomad as. Optional. Default is to use the owner of --config-dir."
  echo -e "  --use-sudo\t\tIf set, run the Nomad agent with sudo. By default, sudo is only used if --client is set."
  echo -e "  --environment\t\A single environment variable in the key/value pair form 'KEY=\"val\"' to pass to Nomad as environment variable when starting it up. Repeat this option for additional variables. Optional."
  echo -e "  --skip-nomad-config\tIf this flag is set, don't generate a Nomad configuration file. Optional. Default is false."

  echo -e "  --enable-consul-acl-token\t\tEnable encryption of Consul ACL token. Optional."
  echo -e "  --enable-gossip-encryption\t\tEnable encryption of gossip traffic between nodes. Optional. Must also specify --gossip-encryption-key."
  echo -e "  --enable-rpc-encryption\t\tEnable encryption of RPC traffic between nodes. Optional."
  echo -e "  --secrets-bucket-name\t\tAWS S3 secrets bucket name."
  echo -e "  --verify-server-hostname\tWhen passed in, enable server hostname verification as part of RPC encryption. Each server in Consul should get their own certificate that contains SERVERNAME.DATACENTERNAME.consul in the hostname or SAN. This prevents an authenticated agent from being converted into a server that streams all data, bypassing ACLs."
  echo
  echo "Example:"
  echo
  echo "  run-nomad --server --config-dir /custom/path/to/nomad/config"
}

function log {
  local readonly level="$1"
  local readonly message="$2"
  local readonly timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info {
  local readonly message="$1"
  log "INFO" "$message"
}

function log_warn {
  local readonly message="$1"
  log "WARN" "$message"
}

function log_error {
  local readonly message="$1"
  log "ERROR" "$message"
}

# Based on code from: http://stackoverflow.com/a/16623897/483528
function strip_prefix {
  local readonly str="$1"
  local readonly prefix="$2"
  echo "${str#$prefix}"
}

function assert_not_empty {
  local readonly arg_name="$1"
  local readonly arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log_error "The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}

function split_by_lines {
  local prefix="$1"
  shift

  for var in "$@"; do
    echo "${prefix}${var}"
  done
}

function get_object {
  local -r secrets_bucket_name="$1"
  local -r source="$2"
  local -r target="$3"
  local -r user="$4"

  log_info "Downloading ${source}"

  aws s3api get-object \
    --bucket "${secrets_bucket_name}" \
    --key "${source}" \
    "${target}" > /dev/null || exit 1

  chown "${user}:${user}" "${target}"
}

function get_object_value {
  local -r secrets_bucket_name="$1"
  local -r source="$2"

  log_info "Downloading ${source}"

  aws s3 cp --quiet \
    "s3://${secrets_bucket_name}/${source}" /dev/stdout || exit 1
}

function lookup_path_in_instance_metadata {
  local readonly path="$1"
  curl --silent --location "$EC2_INSTANCE_METADATA_URL/$path/"
}

function lookup_path_in_instance_dynamic_data {
  local readonly path="$1"
  curl --silent --location "$EC2_INSTANCE_DYNAMIC_DATA_URL/$path/"
}

function get_instance_ip_address {
  lookup_path_in_instance_metadata "ipv6"
}

function get_instance_id {
  lookup_path_in_instance_metadata "instance-id"
}

function get_instance_availability_zone {
  lookup_path_in_instance_metadata "placement/availability-zone"
}

function get_instance_region {
  lookup_path_in_instance_dynamic_data "instance-identity/document" | jq -r ".region"
}

function assert_is_installed {
  local readonly name="$1"

  if [[ ! $(command -v ${name}) ]]; then
    log_error "The binary '$name' is required by this script but is not installed or in the system's PATH."
    exit 1
  fi
}

function generate_nomad_config {
  umask 027

  local readonly server="$1"
  local readonly client="$2"
  local readonly num_servers="$3"
  local readonly config_dir="$4"
  local readonly user="$5"

  local readonly enable_gossip_encryption="$6"
  local readonly gossip_encryption_key="$7"

  local readonly enable_consul_acl_token="$8"
  local readonly consul_acl_token="$9"

  local readonly enable_rpc_encryption="$10"
  local readonly ca_path="$11"
  local readonly cert_file_path="$12"
  local readonly key_file_path="$13"
  local readonly verify_server_hostname="$14"

  local readonly config_path="$config_dir/$NOMAD_CONFIG_FILE"

  local instance_id=""
  local instance_region=""
  # local instance_availability_zone=""

  instance_id=$(get_instance_id)
  instance_region=$(get_instance_region)
  availability_zone=$(get_instance_availability_zone)

  local server_config=""
  local gossip_encryption_configuration=""

  if [[ "$server" == "true" ]]; then
    if [[ "$enable_gossip_encryption" == "true" && -n "$gossip_encryption_key" ]]; then
      log_info "Creating gossip encryption configuration"
      gossip_encryption_configuration="encrypt = \"$gossip_encryption_key\""
    fi

    server_config=$(cat <<EOF
server {
  enabled = true
  bootstrap_expect = $num_servers
  $gossip_encryption_configuration
}
EOF
)
  fi

  local client_config=""
  if [[ "$client" == "true" ]]; then
    client_config=$(cat <<EOF
client {
  enabled = true
}
EOF
)
  fi

  local consul_acl_token_configuration=""

  if [[ "$enable_consul_acl_token" == "true" && -n "$consul_acl_token" ]]; then
    log_info "Creating Consul ACL configuration"
    consul_acl_token_configuration="token = \"$consul_acl_token\""
  fi

  local rpc_encryption_configuration=""
  if [[ "$enable_rpc_encryption" == "true" && -n "$ca_path" && -n "$cert_file_path" && -n "$key_file_path" ]]; then
    log_info "Creating RPC encryption configuration"
    rpc_encryption_configuration=$(cat <<EOF
tls {
  http = false
  rpc  = true

  ca_file   = "$ca_path"
  cert_file = "$cert_file_path"
  key_file  = "$key_file_path"

  verify_server_hostname = $verify_server_hostname
  verify_https_client    = true
}
EOF
)
  fi

  log_info "Creating default Nomad config file in $config_path"
  cat > "$config_path" <<EOF
datacenter = "$availability_zone"
name       = "$instance_id"
region     = "$instance_region"

addresses {
  http = "127.0.0.1"
  rpc  = "{{ GetPublicInterfaces | include \"name\" \"eth0\" | include \"type\" \"IPv6\" | include \"flags\" \"forwardable|up\" | attr \"address\" }}"
  serf = "{{ GetPublicInterfaces | include \"name\" \"eth0\" | include \"type\" \"IPv6\" | include \"flags\" \"forwardable|up\" | attr \"address\" }}" # non-default ports may be specified
}

advertise {
  http = "127.0.0.1"
  rpc  = "{{ GetPublicInterfaces | include \"name\" \"eth0\" | include \"type\" \"IPv6\" | include \"flags\" \"forwardable|up\" | attr \"address\" }}"
  serf = "{{ GetPublicInterfaces | include \"name\" \"eth0\" | include \"type\" \"IPv6\" | include \"flags\" \"forwardable|up\" | attr \"address\" }}" # non-default ports may be specified
}

$client_config

$server_config

$rpc_encryption_configuration

consul {
  address = "127.0.0.1:8500"
  $consul_acl_token_configuration
}
EOF
  chown "$user:$user" "$config_path"
}

function generate_systemd_config {
  umask 022

  local readonly systemd_config_path="$1"
  local readonly nomad_config_dir="$2"
  local readonly nomad_data_dir="$3"
  local readonly nomad_bin_dir="$4"
  local readonly nomad_sytemd_stdout="$5"
  local readonly nomad_sytemd_stderr="$6"
  local readonly nomad_user="$7"
  local readonly use_sudo="$8"
  shift 8
  local readonly environment=("$@")
  local readonly config_path="$nomad_config_dir/$NOMAD_CONFIG_FILE"

  if [[ "$use_sudo" == "true" ]]; then
    log_info "The --use-sudo flag is set, so running Nomad as the root user"
    nomad_user="root"
  fi

  log_info "Creating systemd config file to run Nomad in $systemd_config_path"

  local readonly unit_config=$(cat <<EOF
[Unit]
Description="HashiCorp Nomad"
Documentation=https://www.nomadproject.io/
Requires=network-online.target
Requires=consul.service
After=network-online.target
After=consul.service
ConditionFileNotEmpty=$config_path

EOF
)

  local readonly service_config=$(cat <<EOF
[Service]
User=$nomad_user
Group=$nomad_user
ExecStart=$nomad_bin_dir/nomad agent -config $nomad_config_dir -data-dir $nomad_data_dir
ExecReload=/bin/kill --signal HUP \$MAINPID
KillMode=process
Restart=on-failure
LimitNOFILE=65536
$(split_by_lines "Environment=" "${environment[@]}")

EOF
)

  local log_config=""
  if [[ ! -z $nomad_sytemd_stdout ]]; then
    log_config+="StandardOutput=$nomad_sytemd_stdout\n"
  fi
  if [[ ! -z $nomad_sytemd_stderr ]]; then
    log_config+="StandardError=$nomad_sytemd_stderr\n"
  fi

  local readonly install_config=$(cat <<EOF
[Install]
WantedBy=multi-user.target
EOF
)

  echo -e "$unit_config" > "$systemd_config_path"
  echo -e "$service_config" >> "$systemd_config_path"
  echo -e "$log_config" >> "$systemd_config_path"
  echo -e "$install_config" >> "$systemd_config_path"
}

function start_nomad {
  log_info "Reloading systemd config and starting Nomad"

  sudo systemctl daemon-reload
  sudo systemctl enable nomad.service
  sudo systemctl restart nomad.service
}

# Based on: http://unix.stackexchange.com/a/7732/215969
function get_owner_of_path {
  local readonly path="$1"
  ls -ld "$path" | awk '{print $3}'
}

function run {
  local server="false"
  local client="false"
  local num_servers=""
  local config_dir=""
  local data_dir=""
  local bin_dir=""
  local systemd_stdout=""
  local systemd_stderr=""
  local user=""
  local skip_nomad_config="false"
  local use_sudo=""
  local environment=()
  local all_args=()

  local enable_gossip_encryption="false"
  local enable_rpc_encryption="false"
  local secrets_bucket_name=""
  local verify_server_hostname="false"
  local enable_consul_acl_token="false"

  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
      --server)
        server="true"
        ;;
      --client)
        client="true"
        ;;
      --num-servers)
        num_servers="$2"
        shift
        ;;
      --config-dir)
        assert_not_empty "$key" "$2"
        config_dir="$2"
        shift
        ;;
      --data-dir)
        assert_not_empty "$key" "$2"
        data_dir="$2"
        shift
        ;;
      --bin-dir)
        assert_not_empty "$key" "$2"
        bin_dir="$2"
        shift
        ;;
      --systemd-stdout)
        assert_not_empty "$key" "$2"
        systemd_stdout="$2"
        shift
        ;;
      --systemd-stderr)
        assert_not_empty "$key" "$2"
        systemd_stderr="$2"
        shift
        ;;
      --user)
        assert_not_empty "$key" "$2"
        user="$2"
        shift
        ;;
      --secrets-bucket-name)
        assert_not_empty "$key" "$2"
        secrets_bucket_name="$2"
        shift
        ;;
      --skip-nomad-config)
        skip_nomad_config="true"
        ;;
      --use-sudo)
        use_sudo="true"
        ;;
      --enable-gossip-encryption)
        enable_gossip_encryption="true"
        ;;
      --enable-consul-acl-token)
        enable_consul_acl_token="true"
        ;;
      --enable-rpc-encryption)
        enable_rpc_encryption="true"
        ;;
      --verify-server-hostname)
        verify_server_hostname="true"
        ;;
      --environment)
        assert_not_empty "$key" "$2"
        environment+=("$2")
        shift
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  if [[ "$server" == "true" ]]; then
    assert_not_empty "--num-servers" "$num_servers"
  fi

  if [[ "$server" == "false" && "$client" == "false" ]]; then
    log_error "At least one of --server or --client must be set"
    exit 1
  fi

  if [[ -z "$use_sudo" ]]; then
    if [[ "$client" == "true" ]]; then
      use_sudo="true"
    else
      use_sudo="false"
    fi
  fi

  assert_is_installed "systemctl"
  assert_is_installed "aws"
  assert_is_installed "curl"
  assert_is_installed "jq"

  if [[ -z "$config_dir" ]]; then
    config_dir=$(cd "$SCRIPT_DIR/../config" && pwd)
  fi

  if [[ -z "$data_dir" ]]; then
    data_dir=$(cd "$SCRIPT_DIR/../data" && pwd)
  fi

  if [[ -z "$bin_dir" ]]; then
    bin_dir=$(cd "$SCRIPT_DIR/../bin" && pwd)
  fi

  # If $systemd_stdout and/or $systemd_stderr are empty, we leave them empty so that generate_systemd_config will use systemd's defaults (journal and inherit, respectively)

  if [[ -z "$user" ]]; then
    user=$(get_owner_of_path "$config_dir")
  fi

  local ca_path=""
  local cert_file_path=""
  local key_file_path=""
  local gossip_encryption_key=""
  local consul_acl_token=""

  local type

  if [[ "$server" == "true" ]]; then
    type="server"
  else
    type="client"
  fi

  if [[ "$skip_nomad_config" == "true" ]]; then
    log_info "The --skip-nomad-config flag is set, so will not generate a default Nomad config file."
  else
    assert_not_empty "--secrets-bucket-name" "$secrets_bucket_name"

    if [[ "$enable_gossip_encryption" == "true" ]]
    then
      gossip_encryption_key="$(get_object_value "${secrets_bucket_name}" "${type}/nomad/gossip-encryption-key.txt")"
    fi

    if [[ "$enable_consul_acl_token" == "true" ]]
    then
      consul_acl_token="$(get_object_value "${secrets_bucket_name}" "${type}/nomad/acl-token-nomad-${type}.txt")"
    fi

    if [[ "$enable_rpc_encryption" == "true" ]]; then
      local tls_path
      local tls_ca_path

      tls_path="$(cd "$SCRIPT_DIR/../tls" && pwd)"
      tls_ca_path="$(cd "$SCRIPT_DIR/../tls/ca" && pwd)"

      ca_path="${tls_ca_path}/nomad-ca.pem"
      cert_file_path="${tls_path}/nomad-${type}.pem"
      key_file_path="${tls_path}/nomad-${type}-key.pem"

      get_object "${secrets_bucket_name}" "${type}/nomad/nomad-ca.pem" "${ca_path}" "${user}"
      get_object "${secrets_bucket_name}" "${type}/nomad/nomad-${type}.pem" "${cert_file_path}" "${user}"
      get_object "${secrets_bucket_name}" "${type}/nomad/nomad-${type}-key.pem" "${key_file_path}" "${user}"
    fi

    generate_nomad_config "$server" "$client" "$num_servers" "$config_dir" "$user" "$enable_gossip_encryption" "$gossip_encryption_key" "$enable_consul_acl_token" "${consul_acl_token}" "$enable_rpc_encryption" "$ca_path" "$cert_file_path" "$key_file_path" "${verify_server_hostname}"
  fi

  generate_systemd_config "$SYSTEMD_CONFIG_PATH" "$config_dir" "$data_dir" "$bin_dir" "$systemd_stdout" "$systemd_stderr" "$user" "$use_sudo" "${environment[@]}"
  start_nomad
}

run "$@"
