#!/bin/bash
# This script is used to configure and run Nomad on an AWS server.

set -e
set -u
set -o pipefail

umask 027

SCRIPT_DIR=
SCRIPT_NAME=
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SCRIPT_NAME="$(basename "$0")"

readonly NOMAD_CONFIG_FILE="default.hcl"
readonly SYSTEMD_CONFIG_PATH="/usr/lib/systemd/system/nomad.service"
readonly AWS_ASG_TAG_KEY="aws:autoscaling:groupName"
readonly MAX_RETRIES=30
readonly SLEEP_BETWEEN_RETRIES_SEC=10

function wrap {
 local strings="${1}"

 local length
 local cols
 local width

 length="$(echo -n "${strings}" | awk -F '|' '{print $1}' | awk '{ print length }' | sort -n | tail -1)"
 cols="$(tput cols)"

 if [[ $(( (cols - 4) / length )) -ge 2 ]]
 then
  if [[ $((cols - length - 4)) -ge 80 ]]
  then
    width=80
  else
    width=$((cols - length - 4))
  fi

   echo -e "${strings}" | \
    fold -s -w "${width}" | \
    sed -e "/--/! s|^| \||g" | \
    column -t -s '|' | \
    sed  's/^/  /'
 else
    local lines
    local line
    readarray -t lines <<< "${strings}"
    local option
    local description

    if [[ "${cols}" -ge 80 ]]
    then
      width="78"
    else
      width=$((cols - 2))
    fi

    for line in "${lines[@]}"; do
      option="${line%%|*}"
      description=${line#*|}

      echo "${option}"
      echo
      echo "${description}" | fold -s -w "${width}" |  sed  's/^/  /'
      echo
    done
 fi
}

function print_usage {
  echo
  echo "Usage: $SCRIPT_NAME [OPTIONS]"
  echo
  echo "This script is used to configure and run Nomad on an AWS server."
  echo
  echo "Options:"
  echo

  wrap "$(
    echo -e "--server|If set, run in server mode."
    echo -e "--client|If set, run in client mode."
    echo -e "--config-dir|The path to the Nomad config folder."
    echo -e "--data-dir|The path to the Nomad data folder."
    echo -e "--bin-dir|The path to the folder with Nomad binary."
    echo -e "--systemd-stdout|The StandardOutput option of the systemd unit."
    echo -e "--systemd-stderr|The StandardError option of the systemd unit."
    echo -e "--user|The user to run Nomad as."
    echo -e "--use-sudo|If set, run the Nomad agent with sudo."
    echo -e "--environment|A single environment variable in the key/value pair form 'KEY=\"val\"' to pass to Nomad as environment variable when starting it up."
    echo -e "--skip-nomad-config|If this flag is set, don't generate a Nomad configuration file."
    echo -e "--enable-consul-acl-token|Enable encryption of Consul ACL token."
    echo -e "--enable-gossip-encryption|Enable encryption of gossip traffic between nodes."
    echo -e "--enable-tls-encryption|Enable encryption of traffic between nodes."
    echo -e "--secrets-bucket-name|AWS S3 secrets bucket name."
    echo -e "--verify-server-hostname|When passed in, enable server hostname verification as part of RPC encryption."
    echo -e "--interface|Bind to interface."
    echo -e "--ipv6|Use IPv6."
  )"
  echo
  echo "Example:"
  echo
  echo "  $SCRIPT_NAME --server --config-dir /custom/path/to/nomad/config"
  echo
}

function log {
  local -r level="$1"
  local -r message="$2"
  local -r timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info {
  local -r message="$1"
  log "INFO" "$message"
}

function log_warn {
  local -r message="$1"
  log "WARN" "$message"
}

function log_error {
  local -r message="$1"
  log "ERROR" "$message"
}

# Based on code from: http://stackoverflow.com/a/16623897/483528
function strip_prefix {
  local -r str="$1"
  local -r prefix="$2"
  echo "${str#$prefix}"
}

function assert_not_empty {
  local -r arg_name="$1"
  local -r arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log_error "The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}

function split_by_lines {
  local prefix="$1"
  shift

  for var in "$@"; do
    echo "${prefix}${var}"
  done
}

function get_object {
  local -r secrets_bucket_name="$1"
  local -r source="$2"
  local -r target="$3"
  local -r user="$4"

  local -r key="${EC2_INSTANCE_REGION}/${source}"

  log_info "Downloading ${key}"

  aws s3api get-object \
    --bucket "${secrets_bucket_name}" \
    --key "${key}" \
    "${target}" > /dev/null || exit 1

  chown "${user}:${user}" "${target}"
}

function get_object_value {
  local -r secrets_bucket_name="$1"
  local -r source="$2"

  local -r key="${EC2_INSTANCE_REGION}/${source}"

  log_info "Downloading ${key}"

  aws s3 cp --quiet \
    "s3://${secrets_bucket_name}/${key}" /dev/stdout || exit 1
}

function assert_is_installed {
  local -r name="$1"

  if [[ ! $(command -v ${name}) ]]; then
    log_error "The binary '$name' is required by this script but is not installed or in the system's PATH."
    exit 1
  fi
}

function address_type {
  local -r ipv6="${1}"
  local type

  if [[ "$ipv6" == "true" ]]
  then
    type="ipv6"
  else
    type="ipv4"
  fi

  echo "${type}"
}

function get_nomad_address {
  local -r server="${1}"
  local -r ipv6="${2}"
  local -r interface="${3}"

  local type
  local variable_reference

  type="$(address_type "${ipv6}")"

  # if [[ "${server}" == "false" && -v "EC2_INSTANCE_${interface^^}_${type^^}_PREFIX_ADDRESS" ]]
  # then
  #   variable_reference="EC2_INSTANCE_${interface^^}_${type^^}_PREFIX_ADDRESS"
  # else
  variable_reference="EC2_INSTANCE_${interface^^}_${type^^}_ADDRESS"
  # fi

  echo "${!variable_reference}"
}

function get_vpc_cidr {
  local -r ipv6="${1}"
  local -r interface="${2}"

  local type
  local variable_reference

  type="$(address_type "${ipv6}")"

  variable_reference="EC2_INSTANCE_${interface^^}_${type^^}_VPC_CIDR"

  echo "${!variable_reference}"
}

function get_prefix_cidr {
  local -r ipv6="${1}"
  local -r interface="${2}"

  local type
  local variable_reference

  type="$(address_type "${ipv6}")"

  variable_reference="EC2_INSTANCE_${interface^^}_${type^^}_PREFIX_CIDR"

  echo "${!variable_reference}"
}

function get_instance_tags {
  local -r instance_id="$1"
  local -r instance_region="${EC2_INSTANCE_REGION}"
  local tags=""
  local count_tags=""

  log_info "Looking up tags for Instance $instance_id in $instance_region"
  for (( i=1; i<="$MAX_RETRIES"; i++ )); do
    tags=$(aws ec2 describe-tags \
      --region "$instance_region" \
      --filters "Name=resource-type,Values=instance" "Name=resource-id,Values=${instance_id}")
    count_tags=$(echo "$tags" | jq -r ".Tags? | length")
    if [[ "$count_tags" -gt 0 ]]; then
      log_info "This Instance $instance_id in $instance_region has Tags."
      echo "$tags"
      return
    else
      log_warn "This Instance $instance_id in $instance_region does not have any Tags."
      log_warn "Will sleep for $SLEEP_BETWEEN_RETRIES_SEC seconds and try again."
      sleep "$SLEEP_BETWEEN_RETRIES_SEC"
    fi
  done

  log_error "Could not find Instance Tags for $instance_id in $instance_region after $MAX_RETRIES retries."
  exit 1
}

function get_asg_size {
  local -r asg_name="$1"
  local -r aws_region="${EC2_INSTANCE_REGION}"
  local asg_json=""

  log_info "Looking up the size of the Auto Scaling Group $asg_name in $aws_region"
  asg_json=$(aws autoscaling describe-auto-scaling-groups --region "$aws_region" --auto-scaling-group-names "$asg_name")
  echo "$asg_json" | jq -r '.AutoScalingGroups[0].DesiredCapacity'
}

function get_cluster_size {
  local -r instance_tags="$1"
  local -r aws_region="${EC2_INSTANCE_REGION}"

  local asg_name=""
  asg_name=$(get_tag_value "$instance_tags" "$AWS_ASG_TAG_KEY")
  if [[ -z "$asg_name" ]]; then
    log_warn "This EC2 Instance does not appear to be part of an Auto Scaling Group, so cannot determine cluster size. Setting cluster size to 1."
    echo 1
  else
    get_asg_size "$asg_name"
  fi
}

# Get the value for a specific tag from the tags JSON returned by the AWS describe-tags:
# https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-tags.html
function get_tag_value {
  local -r tags="$1"
  local -r tag_key="$2"

  echo "$tags" | jq -r ".Tags[] | select(.Key == \"$tag_key\") | .Value"
}

function generate_nomad_config {
  umask 027

  local -r server="${1}"
  local -r client="${2}"
  local -r config_dir="${3}"
  local -r plugin_dir="${4}"
  local -r user="${5}"
  local -r enable_gossip_encryption="${6}"
  local -r gossip_encryption_key="${7}"
  local -r enable_consul_acl_token="${8}"
  local -r consul_acl_token="${9}"
  local -r enable_tls_encryption="${10}"
  local -r ca_file_path="${11}"
  local -r cert_file_path="${12}"
  local -r key_file_path="${13}"
  local -r consul_ca_file_path="${14}"
  local -r consul_cert_file_path="${15}"
  local -r consul_key_file_path="${16}"
  local -r verify_server_hostname="${17}"
  local -r verify_https_client="${18}"
  local -r ipv6="${19}"
  local -r interface="${20}"

  local -r config_path="$config_dir/$NOMAD_CONFIG_FILE"

  local instance_id="${EC2_INSTANCE_ID}"
  local instance_region="${EC2_INSTANCE_REGION}"
  local availability_zone="${EC2_INSTANCE_AVAILABILITY_ZONE}"
  local instance_type="${EC2_INSTANCE_TYPE}"
  local consul_port="8500"

  local server_config=""
  local gossip_encryption_configuration=""

  local address

  address="$(get_nomad_address "${server}" "${ipv6}" "${interface}")"

  if [[ "$server" == "true" ]]; then
    if [[ "$enable_gossip_encryption" == "true" && -n "$gossip_encryption_key" ]]; then
      log_info "Creating gossip encryption configuration"
      gossip_encryption_configuration="encrypt = \"$gossip_encryption_key\""
    fi

    local instance_tags=""
    local cluster_size=""

    instance_tags=$(get_instance_tags "$instance_id")
    cluster_size=$(get_cluster_size "$instance_tags")

    server_config=$(cat <<EOF
acl {
  enabled = true
}

server {
  enabled = true
  bootstrap_expect = $cluster_size
  $gossip_encryption_configuration

  default_scheduler_config {
    scheduler_algorithm             = "spread"
    memory_oversubscription_enabled = true
    reject_job_registration         = false

    preemption_config {
      system_scheduler_enabled   = true
      service_scheduler_enabled  = true
      batch_scheduler_enabled    = false
      sysbatch_scheduler_enabled = false
    }
  }
}
EOF
)
  fi

  local client_config=""
  if [[ "$client" == "true" ]]; then
    client_config=$(cat <<EOF
client {
  enabled = true
  network_interface = "${interface}"
  node_class = "${instance_type}"
  options = {
    "fingerprint.network.disallow_link_local" = "true"
  }
}

plugin "docker" {
  config {
    endpoint = "unix:///run/docker.sock"

    allow_privileged = true

    volumes {
      enabled      = true
      selinuxlabel = "z"
    }
  }
}

EOF
)
  fi

  local consul_acl_token_configuration=""

  if [[ "$enable_consul_acl_token" == "true" && -n "$consul_acl_token" ]]; then
    log_info "Creating Consul ACL configuration"
    consul_acl_token_configuration="token = \"$consul_acl_token\""
  fi

  local tls_encryption_configuration=""
  if [[ "$enable_tls_encryption" == "true" && -n "$ca_file_path" && -n "$cert_file_path" && -n "$key_file_path" ]]; then
    log_info "Creating TLS encryption configuration"
    tls_encryption_configuration=$(cat <<EOF
tls {
  http = true
  rpc  = true

  ca_file   = "$ca_file_path"
  cert_file = "$cert_file_path"
  key_file  = "$key_file_path"

  verify_server_hostname = $verify_server_hostname
  verify_https_client    = $verify_https_client
}
EOF
)
  fi

  local consul_tls_encryption_configuration=""

  if [[ "$enable_tls_encryption" == "true" && -n "$consul_ca_file_path" && -n "$consul_cert_file_path" && -n "$consul_key_file_path" ]]; then
    log_info "Creating Consul TLS encryption configuration"

    consul_port="8501"

    consul_tls_encryption_configuration=$(cat <<EOF

  ssl        = true
  verify_ssl = true
  ca_file    = "$consul_ca_file_path"
  cert_file  = "$consul_cert_file_path"
  key_file   = "$consul_key_file_path"
EOF
)
  fi

  log_info "Creating default Nomad config file in $config_path"
  cat > "$config_path" <<EOF
plugin_dir = "${plugin_dir}"
datacenter = "$availability_zone"
name       = "$instance_id"
region     = "$instance_region"

addresses {
  http = "127.0.0.1 ::1 ${address}"
  rpc  = "${address}"
  serf = "${address}"
}

advertise {
  http = "${address}"
  rpc  = "${address}"
  serf = "${address}"
}

$client_config

$server_config

$tls_encryption_configuration

telemetry {
  publish_allocation_metrics = true
  publish_node_metrics       = true
  disable_hostname           = true
  prometheus_metrics         = true
  collection_interval        = "1s"
}

consul {
  address = "[::1]:${consul_port}"

  $consul_acl_token_configuration
  $consul_tls_encryption_configuration
}
EOF
  chown "$user:$user" "$config_path"
}

function generate_ferm_config {
  log_info "Writing ferm configuration"

  local server="$1"
  local ipv6="$2"
  local interface="$3"

  local template_path="/etc/ferm/ferm.d/1010-nomad.conf"

  local address
  local domain
  local prefix_cidr=""
  local vpc_cidr

  if [[ "$ipv6" == "true"  ]]
  then
    domain="ip6"
  else
    domain="ip"
  fi

  address="$(get_nomad_address "${server}" "${ipv6}" "${interface}")"
  vpc_cidr="$(get_vpc_cidr "${ipv6}" "${interface}")"

  if [[ "$server" == "false"  ]]
  then
    prefix_cidr="$(get_prefix_cidr "${ipv6}" "${interface}")"
  fi

  local -r template=$(cat <<EOF
domain (ip ip6) table filter {
  chain OUTPUT {
    daddr (169.254.169.254 fd00:ec2::254) proto tcp mod owner uid-owner "nomad" ACCEPT;
  }
}

domain ({{ (ds "data").domain }}) table filter chain INPUT saddr {{ (ds "data").vpc_cidr }} daddr {{ (ds "data").address }} {
  # The port used for internal RPC communication between agents and
  # servers, and for inter-server traffic for the consensus algorithm
  # (raft).
  proto tcp dport 4647 ACCEPT;

  # The port used for the gossip protocol for cluster membership. Both TCP
  # and UDP should be routable between the server nodes on this port.
  proto (tcp udp) dport 4648 ACCEPT;

  # The port used to run the HTTP server
  proto tcp dport 4646 ACCEPT;
}

{{ if bool ((ds "data").server) }}
{{ else }}
{{ end }}
EOF
)

  echo "{ \"server\": ${server}, \"domain\": \"${domain}\", \"address\": \"${address}\", \"vpc_cidr\": \"${vpc_cidr}\", \"prefix_cidr\": \"${prefix_cidr}\" }" | jq '.' | gomplate \
    -i "${template}" -d data=stdin:///data.json > "${template_path}"

  chown root:root "${template_path}"
  chmod 600 "${template_path}"
}

function generate_systemd_config {
  umask 022

  local -r systemd_config_path="${1}"
  local -r nomad_config_dir="${2}"
  local -r nomad_data_dir="${3}"
  local -r nomad_bin_dir="${4}"
  local -r nomad_sytemd_stdout="${5}"
  local -r nomad_sytemd_stderr="${6}"
  local nomad_user="${7}"
  local -r use_sudo="${8}"

  shift 8

  local -r environment=("$@")
  local -r config_path="$nomad_config_dir/$NOMAD_CONFIG_FILE"

  if [[ "$use_sudo" == "true" ]]; then
    log_info "The --use-sudo flag is set, so running Nomad as the root user"
    nomad_user="root"
  fi

  log_info "Creating systemd config file to run Nomad in $systemd_config_path"

  local -r unit_config=$(cat <<EOF
[Unit]
Description="HashiCorp Nomad"
Documentation=https://www.nomadproject.io/
After=consul-online.target
After=docker.service
After=ferm.service
After=network-online.target
Wants=consul-online.target
Wants=docker.service
Wants=ferm.service
Wants=network-online.target
ConditionFileNotEmpty=$config_path

EOF
)

  local -r service_config=$(cat <<EOF
[Service]
User=$nomad_user
Group=$nomad_user
ExecStart=$nomad_bin_dir/nomad agent -config $nomad_config_dir -data-dir $nomad_data_dir
ExecReload=/bin/kill --signal HUP \$MAINPID
KillMode=process
KillSignal=SIGINT
LimitNOFILE=65536
LimitNPROC=infinity
OOMScoreAdjust=-1000
Restart=on-failure
RestartSec=2
TasksMax=infinity

$(split_by_lines "Environment=" "${environment[@]}")

EOF
)

  local log_config=""
  if [[ ! -z $nomad_sytemd_stdout ]]; then
    log_config+="StandardOutput=$nomad_sytemd_stdout\n"
  fi
  if [[ ! -z $nomad_sytemd_stderr ]]; then
    log_config+="StandardError=$nomad_sytemd_stderr\n"
  fi

  local -r install_config=$(cat <<EOF
[Install]
WantedBy=multi-user.target
EOF
)

  echo -e "$unit_config" > "$systemd_config_path"
  echo -e "$service_config" >> "$systemd_config_path"
  echo -e "$log_config" >> "$systemd_config_path"
  echo -e "$install_config" >> "$systemd_config_path"
}

function start_nomad {
  log_info "Reloading systemd config and starting Nomad"

  sudo systemctl daemon-reload
  sudo systemctl enable nomad.service
  sudo systemctl restart ferm.service nomad.service
}

# Based on: http://unix.stackexchange.com/a/7732/215969
function get_owner_of_path {
  local -r path="$1"
  ls -ld "$path" | awk '{print $3}'
}

function trust-ca {
  local -r source="${1}"
  local name

  name="$(basename "${source}")"

  local -r path="/etc/pki/ca-trust/source/anchors/${name}"

  cp -f "${source}" "${path}"
  chown root:root "${path}"
  chmod 644 "${path}"

  update-ca-trust
}

function run {
  if [[ ! -f "/etc/sysconfig/ec2-environment" ]]
  then
    print_usage

    log_error "/etc/sysconfig/ec2-environment: No such file"

    exit 1
  fi

  set -o allexport
  source "/etc/sysconfig/ec2-environment"
  set +o allexport

  local server="false"
  local client="false"
  local config_dir=""
  local plugin_dir=""
  local data_dir=""
  local bin_dir=""
  local systemd_stdout=""
  local systemd_stderr=""
  local user=""
  local skip_nomad_config="false"
  local use_sudo=""
  local environment=()
  # local all_args=()

  local enable_gossip_encryption="false"
  local enable_tls_encryption="false"
  local secrets_bucket_name=""
  local verify_server_hostname="false"
  local verify_https_client="false"
  local enable_consul_acl_token="false"

  local ipv6="false"
  local interface="eth0"

  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
      --server)
        server="true"
        ;;
      --client)
        client="true"
        ;;
      --config-dir)
        assert_not_empty "$key" "$2"
        config_dir="$2"
        shift
        ;;
      --plugin-dir)
        assert_not_empty "$key" "$2"
        plugin_dir="$2"
        shift
        ;;
      --data-dir)
        assert_not_empty "$key" "$2"
        data_dir="$2"
        shift
        ;;
      --bin-dir)
        assert_not_empty "$key" "$2"
        bin_dir="$2"
        shift
        ;;
      --systemd-stdout)
        assert_not_empty "$key" "$2"
        systemd_stdout="$2"
        shift
        ;;
      --systemd-stderr)
        assert_not_empty "$key" "$2"
        systemd_stderr="$2"
        shift
        ;;
      --user)
        assert_not_empty "$key" "$2"
        user="$2"
        shift
        ;;
      --secrets-bucket-name)
        assert_not_empty "$key" "$2"
        secrets_bucket_name="$2"
        shift
        ;;
      --skip-nomad-config)
        skip_nomad_config="true"
        ;;
      --use-sudo)
        use_sudo="true"
        ;;
      --enable-gossip-encryption)
        enable_gossip_encryption="true"
        ;;
      --enable-consul-acl-token)
        enable_consul_acl_token="true"
        ;;
      --enable-tls-encryption)
        enable_tls_encryption="true"
        ;;
      --verify-server-hostname)
        verify_server_hostname="true"
        ;;
      --verify-https-client)
        verify_https_client="true"
        ;;
      --environment)
        assert_not_empty "$key" "$2"
        environment+=("$2")
        shift
        ;;
      --ipv6)
        ipv6="true"
        ;;
      --interface)
        assert_not_empty "$key" "$2"
        interface="$2"
        shift
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  if [[ ("$server" == "true" && "$client" == "true") || ("$server" == "false" && "$client" == "false") ]]; then
    log_error "Exactly one of --server or --client must be set."
    exit 1
  fi

  if [[ -z "$use_sudo" ]]; then
    if [[ "$client" == "true" ]]; then
      use_sudo="true"
    else
      use_sudo="false"
    fi
  fi

  assert_is_installed "systemctl"
  assert_is_installed "aws"
  assert_is_installed "curl"
  assert_is_installed "jq"
  assert_is_installed "gomplate"

  if [[ "$enable_tls_encryption" == "true" ]]
  then
    assert_is_installed "update-ca-trust"
  fi

  if [[ -z "$config_dir" ]]; then
    config_dir=$(cd "$SCRIPT_DIR/../config" && pwd)
  fi

  if [[ -z "$plugin_dir" ]]; then
    plugin_dir=$(cd "$SCRIPT_DIR/../plugins" && pwd)
  fi

  if [[ -z "$data_dir" ]]; then
    data_dir=$(cd "$SCRIPT_DIR/../data" && pwd)
  fi

  if [[ -z "$bin_dir" ]]; then
    bin_dir=$(cd "$SCRIPT_DIR/../bin" && pwd)
  fi

  # If $systemd_stdout and/or $systemd_stderr are empty, we leave them empty so that generate_systemd_config will use systemd's defaults (journal and inherit, respectively)

  if [[ -z "$user" ]]; then
    user=$(get_owner_of_path "$config_dir")
  fi

  local nomad_ca_file_path=""
  local nomad_cert_file_path=""
  local nomad_key_file_path=""

  local consul_ca_file_path=""
  local consul_cert_file_path=""
  local consul_key_file_path=""

  local gossip_encryption_key=""
  local consul_acl_token=""

  local type

  if [[ "$server" == "true" ]]; then
    type="server"
  else
    type="client"
  fi

  if [[ "$skip_nomad_config" == "true" ]]; then
    log_info "The --skip-nomad-config flag is set, so will not generate a default Nomad config file."
  else
    assert_not_empty "--secrets-bucket-name" "$secrets_bucket_name"

    if [[ "$enable_gossip_encryption" == "true" ]]
    then
      gossip_encryption_key="$(get_object_value "${secrets_bucket_name}" "${type}/nomad/nomad-gossip-encryption-key")"
    fi

    if [[ "$enable_consul_acl_token" == "true" ]]
    then
      consul_acl_token="$(get_object_value "${secrets_bucket_name}" "${type}/nomad/consul-acl-token-nomad-${type}")"
    fi

    if [[ "$enable_tls_encryption" == "true" ]]; then
      local tls_path
      local tls_ca_path

      tls_path="$(cd "$SCRIPT_DIR/../tls" && pwd)"
      tls_ca_path="$(cd "$SCRIPT_DIR/../tls/ca" && pwd)"

      nomad_ca_file_path="${tls_ca_path}/nomad-ca.pem"
      nomad_cert_file_path="${tls_path}/nomad-${type}.pem"
      nomad_key_file_path="${tls_path}/nomad-${type}-key.pem"

      get_object "${secrets_bucket_name}" \
        "${type}/nomad/nomad-ca.pem" \
        "${nomad_ca_file_path}" \
        "${user}"

      get_object "${secrets_bucket_name}" \
        "${type}/nomad/nomad-${type}.pem" \
        "${nomad_cert_file_path}" \
        "${user}"

      get_object "${secrets_bucket_name}" \
        "${type}/nomad/nomad-${type}-key.pem" \
        "${nomad_key_file_path}" \
        "${user}"

      # Consul TLS
      consul_ca_file_path="${tls_ca_path}/consul-ca.pem"
      consul_cert_file_path="${tls_path}/consul-nomad.pem"
      consul_key_file_path="${tls_path}/consul-nomad-key.pem"

      get_object "${secrets_bucket_name}" \
        "${type}/nomad/consul-ca.pem" \
        "${consul_ca_file_path}" \
        "${user}"

      # if [[ "$server" == "true" ]]
      # then
      get_object "${secrets_bucket_name}" \
        "${type}/nomad/consul-nomad.pem" \
        "${consul_cert_file_path}" \
        "${user}"

      get_object "${secrets_bucket_name}" \
        "${type}/nomad/consul-nomad-key.pem" \
        "${consul_key_file_path}" \
        "${user}"
    fi

    generate_nomad_config \
      "$server" \
      "$client" \
      "$config_dir" \
      "$plugin_dir" \
      "$user" \
      "$enable_gossip_encryption" \
      "$gossip_encryption_key" \
      "$enable_consul_acl_token" \
      "$consul_acl_token" \
      "$enable_tls_encryption" \
      "$nomad_ca_file_path" \
      "$nomad_cert_file_path" \
      "$nomad_key_file_path" \
      "$consul_ca_file_path" \
      "$consul_cert_file_path" \
      "$consul_key_file_path" \
      "$verify_server_hostname" \
      "$verify_https_client" \
      "$ipv6" \
      "$interface"
  fi

  generate_systemd_config \
    "$SYSTEMD_CONFIG_PATH" \
    "$config_dir" \
    "$data_dir" \
    "$bin_dir" \
    "$systemd_stdout" \
    "$systemd_stderr" \
    "$user" \
    "$use_sudo" \
    "${environment[@]}"

  generate_ferm_config \
    "$server" \
    "$ipv6" \
    "$interface"

  trust-ca "$nomad_ca_file_path"

  cat > "/etc/profile.d/nomad.sh" <<EOF
export NOMAD_ADDR=https://localhost:4646
EOF

  chown "root:root" "/etc/profile.d/nomad.sh"
  chmod 644 "/etc/profile.d/nomad.sh"

  start_nomad
}

run "$@"
