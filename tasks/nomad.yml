---

- name: install dependencies
  ansible.builtin.dnf:
    name: "{{ packages }}"
    state: present
    allowerasing: true
  vars:
    packages:
      - curl
      - unzip
      - jq
      - retry

- name: nomad group
  ansible.builtin.group:
    name: nomad
    state: present
    system: true

- name: nomad user
  ansible.builtin.user:
    name: nomad
    group: nomad
    system: true
    create_home: false

- name: packages
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  with_items: "{{ nomad_packages }}"

- name: create nomad directories
  ansible.builtin.file:
    owner: nomad
    group: nomad
    path: "{{ item }}"
    state: directory
    mode: 0755
  with_items:
    - "{{ nomad_dir }}"
    - "{{ nomad_bin_dir }}"

- name: create nomad directories
  ansible.builtin.file:
    owner: nomad
    group: nomad
    path: "{{ item }}"
    state: directory
    mode: 0750
  with_items:
    - "{{ nomad_dir }}/data"
    - "{{ nomad_dir }}/config"
    - "{{ nomad_dir }}/tls"
    - "{{ nomad_dir }}/tls/ca"
    - "{{ nomad_dir }}/plugins"

- name: check nomad version
  ansible.builtin.slurp:
    src: "{{ nomad_dir }}/version"
  register: nomad_current_version
  changed_when: false
  ignore_errors: true

- name: install nomad
  when: nomad_current_version.failed or nomad_current_version['content'] | b64decode != nomad_archive
  block:
    - name: download nomad
      ansible.builtin.get_url:
        url: "{{ nomad_zip_url }}"
        dest: "/tmp/{{ nomad_archive }}"
        checksum: "sha256:{{ nomad_checksum_file_url }}"
        mode: '0660'
      changed_when: false

    - name: extract nomad
      ansible.builtin.unarchive:
        src: "/tmp/{{ nomad_archive }}"
        dest: "{{ nomad_bin_dir }}"
        remote_src: true
      changed_when: false

    - name: chcon nomad binary
      ansible.builtin.file:
        path: "{{ nomad_bin_dir }}/nomad"
        owner: nomad
        group: nomad
        mode: 0755
        setype: bin_t
        seuser: system_u

    - name: write version
      ansible.builtin.copy:
        content: "{{ nomad_archive }}"
        dest: "{{ nomad_dir }}/version"
        owner: root
        group: root
        mode: '0644'

- name: create a nomad symbolic link
  ansible.builtin.file:
    src: "{{ nomad_bin_dir }}/nomad"
    dest: /usr/bin/nomad
    owner: nomad
    group: nomad
    mode: 0755
    state: link

- name: copy run-nomad script
  ansible.builtin.copy:
    src: files/run-nomad
    dest: "{{ nomad_bin_dir }}/run-nomad"
    mode: 0770
    owner: nomad
    group: nomad
  tags:
    - run-nomad

- name: create directory for systemd drop-ins
  ansible.builtin.file:
    path: /etc/systemd/system/nomad.service.d
    owner: root
    group: root
    state: directory
    mode: 0755

- name: cleanup
  ansible.builtin.file:
    path: "/tmp/{{ nomad_archive }}"
    state: "absent"
  changed_when: false

- ansible.builtin.include_tasks: storage-setup.yml
  when: (storage_setup_physical_device is defined) and (storage_setup_physical_device | length > 0) and (nomad_volume|bool)

- name: copy nomad-online script
  ansible.builtin.copy:
    src: nomad-online
    dest: /opt/nomad/bin/nomad-online
    mode: 0750
    owner: nomad
    group: nomad

- name: create nomad-online service
  ansible.builtin.template:
    src: templates/nomad-online.service.j2
    dest: /usr/lib/systemd/system/nomad-online.service
    owner: root
    group: root
    mode: 0644
  notify:
    - nomad daemon-reload

- name: create nomad-online target
  ansible.builtin.template:
    src: templates/nomad-online.target.j2
    dest: /usr/lib/systemd/system/nomad-online.target
    owner: root
    group: root
    mode: 0644
  notify:
    - nomad daemon-reload

- ansible.builtin.include_tasks: nomad-client.yml
  when: nomad_server | bool is false
  tags:
    - run-nomad-network
    - ferm-conf

- ansible.builtin.include_tasks: nomad-server.yml
  when: nomad_server | bool is true
  tags:
    - run-nomad-network
    - ferm-conf
    - nomad-bootstrap
